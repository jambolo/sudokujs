(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var Sudoku;

Sudoku = (function() {
  function Sudoku(canvas) {
    this.canvas = canvas;
    this.ctx = this.canvas.getContext("2d");
    if (this.canvas.width < this.canvas.height) {
      this.cellSize = this.canvas.width / 9;
    } else {
      this.cellSize = this.canvas.height / 15;
    }
    this.lineWidthThin = 1;
    this.lineWidthThick = Math.max(this.cellSize / 20, 3);
    this.draw();
  }

  Sudoku.prototype.drawFill = function(x, y, w, h, color) {
    this.ctx.beginPath();
    this.ctx.rect(x, y, w, h);
    this.ctx.fillStyle = color;
    return this.ctx.fill();
  };

  Sudoku.prototype.drawRect = function(x, y, w, h, color, lineWidth) {
    if (lineWidth == null) {
      lineWidth = 1;
    }
    this.ctx.beginPath();
    this.ctx.strokeStyle = color;
    this.ctx.lineWidth = lineWidth;
    this.ctx.rect(x, y, w, h);
    return this.ctx.stroke();
  };

  Sudoku.prototype.drawLine = function(x1, y1, x2, y2, color, lineWidth) {
    if (color == null) {
      color = "black";
    }
    if (lineWidth == null) {
      lineWidth = 1;
    }
    this.ctx.beginPath();
    this.ctx.strokeStyle = color;
    this.ctx.lineWidth = lineWidth;
    this.ctx.moveTo(x1, y1);
    this.ctx.lineTo(x2, y2);
    return this.ctx.stroke();
  };

  Sudoku.prototype.drawGrid = function(originX, originY, size, solved) {
    var color, i, j, lineWidth, ref;
    if (solved == null) {
      solved = false;
    }
    for (i = j = 0, ref = size; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      color = solved ? "green" : "black";
      lineWidth = this.lineWidthThin;
      if ((size === 1) || (i % 3) === 0) {
        lineWidth = this.lineWidthThick;
      }
      this.drawLine(this.cellSize * (originX + 0), this.cellSize * (originY + i), this.cellSize * (originX + size), this.cellSize * (originY + i), color, lineWidth);
      this.drawLine(this.cellSize * (originX + i), this.cellSize * (originY + 0), this.cellSize * (originX + i), this.cellSize * (originY + size), color, lineWidth);
    }
  };

  Sudoku.prototype.draw = function() {
    this.drawFill(0, 0, this.canvas.width, this.canvas.height, "black");
    this.drawFill(0, 0, this.cellSize * 9, this.canvas.height, "white");
    return this.drawGrid(0, 0, 9);
  };

  Sudoku.prototype.click = function(x, y) {
    return console.log("click " + x + ", " + y);
  };

  return Sudoku;

})();

module.exports = Sudoku;


},{}],2:[function(require,module,exports){
var Sudoku, init;

Sudoku = require('./Sudoku');

init = function() {
  var canvas, canvasRect;
  console.log("init");
  canvas = document.createElement("canvas");
  canvas.width = document.documentElement.clientWidth;
  canvas.height = document.documentElement.clientHeight;
  document.body.insertBefore(canvas, document.body.childNodes[0]);
  canvasRect = canvas.getBoundingClientRect();
  window.sudoku = new Sudoku(canvas);
  canvas.addEventListener("touchstart", function(e) {
    var x, y;
    x = e.touches[0].clientX - canvasRect.left;
    y = e.touches[0].clientY - canvasRect.top;
    return window.sudoku.click(x, y);
  });
  return canvas.addEventListener("mousedown", function(e) {
    var x, y;
    x = e.clientX - canvasRect.left;
    y = e.clientY - canvasRect.top;
    return window.sudoku.click(x, y);
  });
};

window.addEventListener('load', function(e) {
  return init();
}, false);


},{"./Sudoku":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
