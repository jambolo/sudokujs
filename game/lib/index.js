(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var SudokuGame;

SudokuGame = (function() {
  function SudokuGame() {
    var i, j, k, l, m;
    this.grid = new Array(9).fill(null);
    for (i = k = 0; k < 9; i = ++k) {
      this.grid[i] = new Array(9).fill(null);
    }
    for (j = l = 0; l < 9; j = ++l) {
      for (i = m = 0; m < 9; i = ++m) {
        this.grid[i][j] = {
          value: 0,
          error: false,
          locked: false,
          pencil: new Array(9).fill(false)
        };
      }
    }
    this.solved = false;
    return;
  }

  SudokuGame.prototype.updateCell = function(x, y) {
    var cell, i, j, k, l, m, sx, sy, v;
    cell = this.grid[x][y];
    for (i = k = 0; k < 9; i = ++k) {
      if (x !== i) {
        v = this.grid[i][y].value;
        if (v > 0) {
          if (v === cell.value) {
            this.grid[i][y].error = true;
            cell.error = true;
          }
        }
      }
      if (y !== i) {
        v = this.grid[x][i].value;
        if (v > 0) {
          if (v === cell.value) {
            this.grid[x][i].error = true;
            cell.error = true;
          }
        }
      }
    }
    sx = Math.floor(x / 3) * 3;
    sy = Math.floor(y / 3) * 3;
    for (j = l = 0; l < 3; j = ++l) {
      for (i = m = 0; m < 3; i = ++m) {
        if ((x !== (sx + i)) && (y !== (sy + j))) {
          v = this.grid[sx + i][sy + j].value;
          if (v > 0) {
            if (v === cell.value) {
              this.grid[sx + i][sy + j].error = true;
              cell.error = true;
            }
          }
        }
      }
    }
  };

  SudokuGame.prototype.updateCells = function() {
    var i, j, k, l, m, n, o, p;
    for (j = k = 0; k < 9; j = ++k) {
      for (i = l = 0; l < 9; i = ++l) {
        this.grid[i][j].error = false;
      }
    }
    for (j = m = 0; m < 9; j = ++m) {
      for (i = n = 0; n < 9; i = ++n) {
        this.updateCell(i, j);
      }
    }
    this.solved = true;
    for (j = o = 0; o < 9; j = ++o) {
      for (i = p = 0; p < 9; i = ++p) {
        if (this.grid[i][j].error) {
          this.solved = false;
        }
        if (this.grid[i][j].value === 0) {
          this.solved = false;
        }
      }
    }
    return this.solved;
  };

  SudokuGame.prototype.pencilString = function(x, y) {
    var cell, i, k, s;
    cell = this.grid[x][y];
    s = "";
    for (i = k = 0; k < 9; i = ++k) {
      if (cell.pencil[i]) {
        s += String(i + 1);
      }
    }
    return s;
  };

  SudokuGame.prototype.clearPencil = function(x, y) {
    var cell, i, k, results;
    cell = this.grid[x][y];
    if (cell.locked) {
      return;
    }
    results = [];
    for (i = k = 0; k < 9; i = ++k) {
      results.push(cell.pencil[i] = false);
    }
    return results;
  };

  SudokuGame.prototype.togglePencil = function(x, y, v) {
    var cell;
    cell = this.grid[x][y];
    if (cell.locked) {
      return;
    }
    return cell.pencil[v - 1] = !cell.pencil[v - 1];
  };

  SudokuGame.prototype.setValue = function(x, y, v) {
    var cell;
    cell = this.grid[x][y];
    if (cell.locked) {
      return;
    }
    cell.value = v;
    return this.updateCells();
  };

  return SudokuGame;

})();

module.exports = SudokuGame;


},{}],2:[function(require,module,exports){
var ActionType, COLOR_BACKGROUND_CONFLICTED, COLOR_BACKGROUND_ERROR, COLOR_BACKGROUND_LOCKED, COLOR_BACKGROUND_LOCKED_CONFLICTED, COLOR_BACKGROUND_LOCKED_SELECTED, COLOR_BACKGROUND_SELECTED, COLOR_DONE, COLOR_ERROR, COLOR_NEWGAME, COLOR_PENCIL, COLOR_VALUE, NEWGAME_POS_X, NEWGAME_POS_Y, PENCIL_CLEAR_POS_X, PENCIL_CLEAR_POS_Y, PENCIL_POS_X, PENCIL_POS_Y, SudokuGame, SudokuRenderer, VALUE_CLEAR_POS_X, VALUE_CLEAR_POS_Y, VALUE_POS_X, VALUE_POS_Y;

SudokuGame = require('./SudokuGame');

VALUE_POS_X = 1;

VALUE_POS_Y = 10;

VALUE_CLEAR_POS_X = 2;

VALUE_CLEAR_POS_Y = 13;

PENCIL_POS_X = 5;

PENCIL_POS_Y = 10;

PENCIL_CLEAR_POS_X = 6;

PENCIL_CLEAR_POS_Y = 13;

NEWGAME_POS_X = 4;

NEWGAME_POS_Y = 13;

COLOR_VALUE = "black";

COLOR_PENCIL = "#0000ff";

COLOR_ERROR = "#ff0000";

COLOR_DONE = "#cccccc";

COLOR_NEWGAME = "#008833";

COLOR_BACKGROUND_SELECTED = "#eeeeaa";

COLOR_BACKGROUND_LOCKED = "#eeeeee";

COLOR_BACKGROUND_LOCKED_CONFLICTED = "#ffffee";

COLOR_BACKGROUND_LOCKED_SELECTED = "#eeeedd";

COLOR_BACKGROUND_CONFLICTED = "#ffffdd";

COLOR_BACKGROUND_ERROR = "#ffdddd";

ActionType = {
  SELECT: 0,
  PENCIL: 1,
  VALUE: 2,
  NEWGAME: 3
};

SudokuRenderer = (function() {
  function SudokuRenderer(canvas) {
    var f, fontName, fontPixelsL, fontPixelsM, fontPixelsS, ref;
    this.canvas = canvas;
    this.ctx = this.canvas.getContext("2d");
    console.log("canvas size " + this.canvas.width + "x" + this.canvas.height);
    if (this.canvas.width < this.canvas.height) {
      this.cellSize = this.canvas.width / 9;
    } else {
      this.cellSize = this.canvas.height / 15;
    }
    this.lineWidthThin = 1;
    this.lineWidthThick = Math.max(this.cellSize / 20, 3);
    fontPixelsS = Math.floor(this.cellSize * 0.3);
    fontPixelsM = Math.floor(this.cellSize * 0.5);
    fontPixelsL = Math.floor(this.cellSize * 0.8);
    this.font = {
      pencil: {
        style: fontPixelsS + "px monospace",
        height: 0
      },
      newgame: {
        style: fontPixelsM + "px monospace",
        height: 0
      },
      pen: {
        style: fontPixelsL + "px monospace",
        height: 0
      }
    };
    ref = this.font;
    for (fontName in ref) {
      f = ref[fontName];
      this.ctx.font = f.style;
      this.ctx.fillStyle = "black";
      this.ctx.textAlign = "center";
      f.height = this.ctx.measureText("m").width * 1.1;
    }
    this.initActions();
    this.game = new SudokuGame();
    this.penValue = 0;
    this.isPencil = false;
    this.highlightX = -1;
    this.highlightY = -1;
    this.draw();
  }

  SudokuRenderer.prototype.initActions = function() {
    var i, index, j, k, l, m, n, o, p;
    this.actions = new Array(9 * 15).fill(null);
    for (j = k = 0; k < 9; j = ++k) {
      for (i = l = 0; l < 9; i = ++l) {
        index = (j * 9) + i;
        this.actions[index] = {
          type: ActionType.SELECT,
          x: i,
          y: j
        };
      }
    }
    for (j = m = 0; m < 3; j = ++m) {
      for (i = n = 0; n < 3; i = ++n) {
        index = ((VALUE_POS_Y + j) * 9) + (VALUE_POS_X + i);
        this.actions[index] = {
          type: ActionType.VALUE,
          x: 1 + (j * 3) + i,
          y: 0
        };
      }
    }
    for (j = o = 0; o < 3; j = ++o) {
      for (i = p = 0; p < 3; i = ++p) {
        index = ((PENCIL_POS_Y + j) * 9) + (PENCIL_POS_X + i);
        this.actions[index] = {
          type: ActionType.PENCIL,
          x: 1 + (j * 3) + i,
          y: 0
        };
      }
    }
    index = (VALUE_CLEAR_POS_Y * 9) + VALUE_CLEAR_POS_X;
    this.actions[index] = {
      type: ActionType.VALUE,
      x: 10,
      y: 0
    };
    index = (PENCIL_CLEAR_POS_Y * 9) + PENCIL_CLEAR_POS_X;
    this.actions[index] = {
      type: ActionType.PENCIL,
      x: 10,
      y: 0
    };
    index = (NEWGAME_POS_Y * 9) + NEWGAME_POS_X;
    this.actions[index] = {
      type: ActionType.NEWGAME,
      x: 0,
      y: 0
    };
  };

  SudokuRenderer.prototype.drawFill = function(x, y, w, h, color) {
    this.ctx.beginPath();
    this.ctx.rect(x, y, w, h);
    this.ctx.fillStyle = color;
    return this.ctx.fill();
  };

  SudokuRenderer.prototype.drawRect = function(x, y, w, h, color, lineWidth) {
    if (lineWidth == null) {
      lineWidth = 1;
    }
    this.ctx.beginPath();
    this.ctx.strokeStyle = color;
    this.ctx.lineWidth = lineWidth;
    this.ctx.rect(x, y, w, h);
    return this.ctx.stroke();
  };

  SudokuRenderer.prototype.drawLine = function(x1, y1, x2, y2, color, lineWidth) {
    if (color == null) {
      color = "black";
    }
    if (lineWidth == null) {
      lineWidth = 1;
    }
    this.ctx.beginPath();
    this.ctx.strokeStyle = color;
    this.ctx.lineWidth = lineWidth;
    this.ctx.moveTo(x1, y1);
    this.ctx.lineTo(x2, y2);
    return this.ctx.stroke();
  };

  SudokuRenderer.prototype.drawTextCentered = function(text, cx, cy, font, color) {
    this.ctx.font = font.style;
    this.ctx.fillStyle = color;
    this.ctx.textAlign = "center";
    return this.ctx.fillText(text, cx, cy + (font.height / 2));
  };

  SudokuRenderer.prototype.drawCell = function(x, y, backgroundColor, s, font, color) {
    var px, py;
    px = x * this.cellSize;
    py = y * this.cellSize;
    if (backgroundColor !== null) {
      this.drawFill(px, py, this.cellSize, this.cellSize, backgroundColor);
    }
    return this.drawTextCentered(s, px + (this.cellSize / 2), py + (this.cellSize / 2), font, color);
  };

  SudokuRenderer.prototype.drawGrid = function(originX, originY, size, solved) {
    var color, i, k, lineWidth, ref;
    if (solved == null) {
      solved = false;
    }
    for (i = k = 0, ref = size; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
      color = solved ? "green" : "black";
      lineWidth = this.lineWidthThin;
      if ((size === 1) || (i % 3) === 0) {
        lineWidth = this.lineWidthThick;
      }
      this.drawLine(this.cellSize * (originX + 0), this.cellSize * (originY + i), this.cellSize * (originX + size), this.cellSize * (originY + i), color, lineWidth);
      this.drawLine(this.cellSize * (originX + i), this.cellSize * (originY + 0), this.cellSize * (originX + i), this.cellSize * (originY + size), color, lineWidth);
    }
  };

  SudokuRenderer.prototype.draw = function() {
    var backgroundColor, cell, currentValue, currentValueString, done, font, i, j, k, l, m, n, pencilBackgroundColor, pencilColor, text, textColor, valueBackgroundColor, valueColor;
    console.log("draw()");
    this.drawFill(0, 0, this.canvas.width, this.canvas.height, "black");
    this.drawFill(0, 0, this.cellSize * 9, this.canvas.height, "white");
    for (j = k = 0; k < 9; j = ++k) {
      for (i = l = 0; l < 9; i = ++l) {
        cell = this.game.grid[i][j];
        backgroundColor = null;
        font = this.font.pen;
        textColor = COLOR_VALUE;
        text = "";
        if (cell.value === 0) {
          font = this.font.pencil;
          textColor = COLOR_PENCIL;
          text = this.game.pencilString(i, j);
        } else {
          if (cell.value > 0) {
            text = String(cell.value);
          }
        }
        if (cell.locked) {
          backgroundColor = COLOR_BACKGROUND_LOCKED;
        }
        if ((this.highlightX !== -1) && (this.highlightY !== -1)) {
          if ((i === this.highlightX) && (j === this.highlightY)) {
            if (cell.locked) {
              backgroundColor = COLOR_BACKGROUND_LOCKED_SELECTED;
            } else {
              backgroundColor = COLOR_BACKGROUND_SELECTED;
            }
          } else if (this.conflicts(i, j, this.highlightX, this.highlightY)) {
            if (cell.locked) {
              backgroundColor = COLOR_BACKGROUND_LOCKED_CONFLICTED;
            } else {
              backgroundColor = COLOR_BACKGROUND_CONFLICTED;
            }
          }
        }
        if (cell.error) {
          textColor = COLOR_ERROR;
        }
        this.drawCell(i, j, backgroundColor, text, font, textColor);
      }
    }
    done = [false, false, false, false, false, false, false, false, false];
    for (j = m = 0; m < 3; j = ++m) {
      for (i = n = 0; n < 3; i = ++n) {
        currentValue = (j * 3) + i + 1;
        currentValueString = String(currentValue);
        valueColor = COLOR_VALUE;
        pencilColor = COLOR_PENCIL;
        if (done[(j * 3) + i]) {
          valueColor = COLOR_DONE;
          pencilColor = COLOR_DONE;
        }
        valueBackgroundColor = null;
        pencilBackgroundColor = null;
        if (this.penValue === currentValue) {
          if (this.isPencil) {
            pencilBackgroundColor = COLOR_BACKGROUND_SELECTED;
          } else {
            valueBackgroundColor = COLOR_BACKGROUND_SELECTED;
          }
        }
        this.drawCell(VALUE_POS_X + i, VALUE_POS_Y + j, valueBackgroundColor, currentValueString, this.font.pen, valueColor);
        this.drawCell(PENCIL_POS_X + i, PENCIL_POS_Y + j, pencilBackgroundColor, currentValueString, this.font.pen, pencilColor);
      }
    }
    valueBackgroundColor = null;
    pencilBackgroundColor = null;
    if (this.penValue === 10) {
      if (this.isPencil) {
        pencilBackgroundColor = COLOR_BACKGROUND_SELECTED;
      } else {
        valueBackgroundColor = COLOR_BACKGROUND_SELECTED;
      }
    }
    this.drawCell(VALUE_CLEAR_POS_X, VALUE_CLEAR_POS_Y, valueBackgroundColor, "C", this.font.pen, COLOR_ERROR);
    this.drawCell(PENCIL_CLEAR_POS_X, PENCIL_CLEAR_POS_Y, pencilBackgroundColor, "C", this.font.pen, COLOR_ERROR);
    this.drawCell(NEWGAME_POS_X, NEWGAME_POS_Y, null, "New", this.font.newgame, COLOR_NEWGAME);
    this.drawGrid(0, 0, 9, this.game.solved);
    this.drawGrid(VALUE_POS_X, VALUE_POS_Y, 3);
    this.drawGrid(PENCIL_POS_X, PENCIL_POS_Y, 3);
    this.drawGrid(VALUE_CLEAR_POS_X, VALUE_CLEAR_POS_Y, 1);
    return this.drawGrid(PENCIL_CLEAR_POS_X, PENCIL_CLEAR_POS_Y, 1);
  };

  SudokuRenderer.prototype.offerNewGame = function() {};

  SudokuRenderer.prototype.click = function(x, y) {
    var action, index;
    x = Math.floor(x / this.cellSize);
    y = Math.floor(y / this.cellSize);
    if ((x < 9) && (y < 15)) {
      index = (y * 9) + x;
      action = this.actions[index];
      if (action !== null) {
        console.log("Action: ", action);
        switch (action.type) {
          case ActionType.SELECT:
            if (this.penValue === 0) {
              if ((this.highlightX === action.x) && (this.highlightY === action.y)) {
                this.highlightX = -1;
                this.highlightY = -1;
              } else {
                this.highlightX = action.x;
                this.highlightY = action.y;
              }
            } else {
              if (this.isPencil) {
                if (this.penValue === 10) {
                  this.game.clearPencil(action.x, action.y);
                } else {
                  this.game.togglePencil(action.x, action.y, this.penValue);
                }
              } else {
                if (this.penValue === 10) {
                  this.game.setValue(action.x, action.y, 0);
                } else {
                  this.game.setValue(action.x, action.y, this.penValue);
                }
              }
            }
            break;
          case ActionType.PENCIL:
            this.penValue = action.x;
            this.isPencil = true;
            break;
          case ActionType.VALUE:
            this.penValue = action.x;
            this.isPencil = false;
            break;
          case ActionType.NEWGAME:
            this.offerNewGame();
        }
      } else {
        this.highlightX = -1;
        this.highlightY = -1;
        this.penValue = 0;
        this.isPencil = false;
      }
      return this.draw();
    }
  };

  SudokuRenderer.prototype.conflicts = function(x1, y1, x2, y2) {
    var sx1, sx2, sy1, sy2;
    if ((x1 === x2) || (y1 === y2)) {
      return true;
    }
    sx1 = Math.floor(x1 / 3) * 3;
    sy1 = Math.floor(y1 / 3) * 3;
    sx2 = Math.floor(x2 / 3) * 3;
    sy2 = Math.floor(y2 / 3) * 3;
    if ((sx1 === sx2) && (sy1 === sy2)) {
      return true;
    }
    return false;
  };

  return SudokuRenderer;

})();

module.exports = SudokuRenderer;


},{"./SudokuGame":1}],3:[function(require,module,exports){
var SudokuRenderer, init;

SudokuRenderer = require('./SudokuRenderer');

init = function() {
  var canvas, canvasRect;
  console.log("init");
  canvas = document.createElement("canvas");
  canvas.width = document.documentElement.clientWidth;
  canvas.height = document.documentElement.clientHeight;
  document.body.insertBefore(canvas, document.body.childNodes[0]);
  canvasRect = canvas.getBoundingClientRect();
  window.game = new SudokuRenderer(canvas);
  return canvas.addEventListener("mousedown", function(e) {
    var x, y;
    x = e.clientX - canvasRect.left;
    y = e.clientY - canvasRect.top;
    return window.game.click(x, y);
  });
};

window.addEventListener('load', function(e) {
  return init();
}, false);


},{"./SudokuRenderer":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
